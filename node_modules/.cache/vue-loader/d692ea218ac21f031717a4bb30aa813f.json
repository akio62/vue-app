{"remainingRequest":"/Users/akira/vue-app/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/akira/vue-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/akira/vue-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/akira/vue-app/src/components/NavigationBar.vue?vue&type=template&id=d1a7e442&","dependencies":[{"path":"/Users/akira/vue-app/src/components/NavigationBar.vue","mtime":1586533556326},{"path":"/Users/akira/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/akira/vue-app/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/akira/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/akira/vue-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}